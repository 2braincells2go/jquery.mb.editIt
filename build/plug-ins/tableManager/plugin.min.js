! function( a, b ) {
	var c = {
		name: "tableManager",
		description: "Manipulate tables inside a content editable",
		version: "1.0",
		author: "Pupunzi",
		activate: function() {
			var a = this;
			console.debug( "Activate:: ", a )
		},
		update: function( c ) {
			function d( c ) {
				var d = a( e.actualTag ).parents( "[data-editable]" ),
					f = e.actualTable.find( "td" );
				if( !( 0 > c ) ) {
					f.eq( c ).length || ( e.commands.addRowBelow.action( d ), f = e.actualTable.find( "td" ) ), e.actualTable.find( "td" ).selectable();
					var g = b.createRange(),
						h = window.getSelection(),
						i = f.eq( c ).get( 0 );
					g.setStart( i, 0 ), g.collapse( !0 ), g.selectNodeContents( i ), h.removeAllRanges(), h.addRange( g ), f.eq( c ).focus(), e.actualTag = i, e.actualTable.find( "td, th" ).addClass( "unselectable" ), a( e.actualTag ).removeClass( "unselectable" )
				}
			}
			var e = this,
				f = c.editor,
				g = f.editorsContainer.opt.toolBar;
			a.editIt.commands.extend( e.commands ), a.editIt.toolBar.extend( g, "table", 22 ), a( b ).on( "editIt-mousedown." + e.name, function( b ) {
				var c = a( e.actualTag ).parents( "[data-editable]" );
				e.actualTag = b.editor.actualTag || e.hoverElement, e.actualTag && "TD" == e.actualTag.tagName.toUpperCase() ? ( e.actualTable = a( e.actualTag ).parents( "table" ), c.actualSelection = a.editIt.util.saveSelection(), e.actualTable.find( "td, th" ).addClass( "unselectable" ), a( e.actualTag ).removeClass( "unselectable" ) ) : e.actualTable && e.cleanUp( e.actualTable )
			} ), a( b ).on( "editIt-blur." + e.name, function( a ) {
				"TD" == a.editor.actualTag.tagName.toUpperCase()
			} ), a( b ).on( "editIt-mouseover." + e.name, function( a ) {
				e.hoverElement = a.hoverElement
			} ), a( b ).off( "keydown." + e.name ).on( "keydown." + e.name, function( b ) {
				var c = b.keyCode;
				if( a( e.actualTag ).is( "td" ) ) switch( c ) {
					case 9:
						b.preventDefault();
						var f = e.actualTable.find( "td" ).index( a( e.actualTag ) ),
							g = b.shiftKey ? f - 1 : f + 1;
						d( g )
				}
			} )
		},
		destroy: function() {},
		cleanUp: function( a ) {
			a.find( "td" ).removeClass( "unselectable" ).removeAttr( "unselectable" )
		},
		commands: {
			table: {
				label: _( "Table" ),
				icon: "editIt-icon-table",
				type: "dropdown",
				action: function( b ) {
					var c = [ "addTable", "deleteTable", "-", "addRowAbove", "addRowBelow", "removeRow", "-", "addColBefore", "addColAfter", "removeCol" ];
					a.editIt.dropDown.draw.apply( this, [ b, c ] )
				}
			},
			addRowAbove: {
				label: _( "Add row︎" ),
				icon: "editIt-icon-sort-asc",
				availableFor: "TD",
				action: function( b ) {
					var d = a( c.actualTag ).parents( "tr" ),
						e = d.clone();
					e.find( "td" ).empty().html( "&nbsp;" ), d.before( e ), a.editIt.util.restoreSelection( b.actualSelection )
				}
			},
			addRowBelow: {
				label: _( "Add row︎" ),
				availableFor: "TD",
				icon: "editIt-icon-sort-desc",
				action: function( b ) {
					var d = a( c.actualTag ).parents( "tr" ),
						e = d.clone();
					e.find( "td" ).empty().html( "&nbsp;" ), d.after( e ), a.editIt.util.restoreSelection( b.actualSelection )
				}
			},
			removeRow: {
				label: _( "Remove row︎" ),
				availableFor: "TD",
				icon: "editIt-icon-close",
				action: function( b ) {
					var d = a( c.actualTag ).parents( "tr" );
					d.remove(), a.editIt.util.restoreSelection( b.actualSelection )
				}
			},
			addColBefore: {
				label: _( "Add column" ),
				availableFor: "TD",
				icon: "editIt-icon-caret-left",
				action: function( b ) {
					var d = a( c.actualTag ).parents( "table" ),
						e = a( c.actualTag ).index();
					d.find( "tr, th, tf" ).each( function() {
						var b = a( this ).find( "td" ).eq( e ).clone().html( "&nbsp;" );
						a( this ).find( "td" ).eq( e ).before( b )
					} ), a.editIt.util.restoreSelection( b.actualSelection )
				}
			},
			addColAfter: {
				label: _( "Add column" ),
				availableFor: "TD",
				icon: "editIt-icon-caret-right",
				action: function( b ) {
					var d = a( c.actualTag ).parents( "table" ),
						e = a( c.actualTag ).index();
					d.find( "tr, th, tf" ).each( function() {
						var b = a( this ).find( "td" ).eq( e ).clone().html( "&nbsp;" );
						a( this ).find( "td" ).eq( e ).after( b )
					} ), a.editIt.util.restoreSelection( b.actualSelection )
				}
			},
			removeCol: {
				label: _( "remove column" ),
				availableFor: "TD",
				icon: "editIt-icon-close",
				action: function( b ) {
					var d = a( c.actualTag ).parents( "table" ),
						e = a( c.actualTag ).index();
					d.find( "tr, th, tf" ).each( function() {
						a( this ).find( "td" ).eq( e ).remove()
					} ), a.editIt.util.restoreSelection( b.actualSelection )
				}
			},
			addTable: {
				label: _( "Add table" ),
				icon: "editIt-icon-plus",
				action: function( d ) {
					a.get( c.path + "/add-table-prompt.html?_=" + ( new Date ).getTime(), function( e ) {
						var f = d.editorsContainer;
						a.editIt.prompt.draw( f, e, c, function( c ) {
							var d = c.rows,
								e = c.columns,
								f = c.header,
								g = a( "<div/>" ),
								h = a( "<table/>" );
							if( g.append( h ), f ) {
								var i = a( "<thead/>" );
								h.append( i );
								var j = a( "<tr/>" );
								i.append( j );
								for( var k = 0; e > k; k++ ) {
									var l = a( "<td/>" ).html( "&nbsp;" ).addClass( "th-td-" + k ).css( {
										width: 100 / e + "%"
									} );
									j.append( l )
								}
							}
							for( var m = 0; d > m; m++ ) {
								var n = a( "<tr/>" );
								h.append( n );
								for( var o = 0; e > o; o++ ) {
									var p = a( "<td/>" ).html( "&nbsp;" ).addClass( "td-" + o );
									n.append( p )
								}
							}
							g.append( "<br>" );
							var q = g.html();
							b.execCommand( "insertHTML", !1, q )
						} )
					} ), a.editIt.util.restoreSelection( d.actualSelection )
				}
			},
			deleteTable: {
				label: _( "Delete table" ),
				icon: "editIt-icon-close",
				availableFor: "TD",
				action: function( b ) {
					var d = b.editorsContainer;
					a.editIt.prompt.draw( d, _( "<h2>Are you sure you want to delete this table?</h2>" ), c, function( b ) {
						var d = a( c.actualTag ).parents( "table" );
						d.remove()
					} ), a.editIt.util.restoreSelection( b.actualSelection )
				}
			}
		},
		i18n: {
			"it-IT": {
				Table: "Tabella",
				"Add row︎": "Aggiungi riga",
				"Remove row︎": "Elimina riga︎",
				"Add column": "Aggiungi colonna",
				"remove column": "Rimuovi colonna",
				"Add table": "Aggiungi tabella",
				"Delete table": "Elimina tabella",
				"<h2>Are you sure you want to delete this table?</h2>": "<h2>Sei sicuro di voler eliminare questa tabella?</h2>",
				"Add a table:": "Aggiungi una tabella:",
				"Add header": "Aggiungi una intestazione:",
				"How many rows?": "Quante righe?",
				"How many columns?": "Quante colonne?",
				"%% rows and %% columns": "%% righe e %% colonne"
			}
		}
	};
	a.editIt.plugins.register( c )
}( jQuery, document );
//# sourceMappingURL=plugin.min.js.map
